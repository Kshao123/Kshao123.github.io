<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>React.withContext 和 getChildContext 的使用</title>
    <link href="/2019/07/06/react-context/"/>
    <url>/2019/07/06/react-context/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>shusuanfa</title>
    <link href="/2019/07/03/shusuanfa/"/>
    <url>/2019/07/03/shusuanfa/</url>
    
    <content type="html"><![CDATA[<p>cnm123123123123123123123<br>wo hen 5 1497</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>滚动歌词</title>
    <link href="/2019/07/02/music-gun/"/>
    <url>/2019/07/02/music-gun/</url>
    
    <content type="html"><![CDATA[<h4 id="滚动歌词"><a href="#滚动歌词" class="headerlink" title="滚动歌词"></a>滚动歌词</h4><ol><li>把获取到的歌词 用换行符 split 分割</li><li>使用正则判断并分割出时间和歌词</li><li>把正则匹配出的 分、秒、毫秒 转换成秒 做 key 传入 temp 对象，或者 push 数组也可以，没有 key 的排序问题</li><li>通过 temp 遍历出 html 元素放入 content</li><li>监听 audio 的 [on]timeupdate 事件，关键字 e.target.currentTime 为当前播放时间</li><li>根据 时间 找到 匹配的歌词元素，计算元素的 top 与 父元素 top 的差，即为上滚的距离</li><li>滚动时给当前 歌词元素 加上 active class 使其突出</li></ol><h6 id="获取到的歌词可在-log-里查看"><a href="#获取到的歌词可在-log-里查看" class="headerlink" title="获取到的歌词可在 log 里查看"></a>获取到的歌词可在 log 里查看</h6><style>    audio {        width: 300px;        height: 100px;      }          .lrc-box {        margin: 100px auto;      }          .lrc-wrap {        margin: auto;        width: 80%;        height: 400px;        background-color: rgba(153, 204, 153, 0.48);        overflow: hidden;        padding: 0 15px;        position: relative;      }          .lrc-content {        margin-top: 60px;        position: absolute;        text-align: center;        padding-top: 60px;        left: 50%;        transform: translate(-50%, 0);        transition: all 1s;      }          .lrc-content p {        text-align: center;        transition: all .1s;        /*transition-delay: .4s;*/      }          .active {        color: white;        background-color: hotpink;      }</style><div class="lrc-box"><audio id="musicBtn" style="width: 200px; height: 100px" autoplay controls="controls" src="../assets/music-gun/music.mp3"> </audio>  <div class="lrc-wrap">    <div class="lrc-content">    </div>  </div></div><script>const data = {    music: "[00:01.00]岁月神偷 - 金玟岐\n" +        "[00:06.00]\n" +        "[00:07.50]歌词编辑：\n" +        "[00:12.50]QQ：123123\n" +        "[00:17.50]\n" +        "[00:19.04]能够握紧的就别放了\n" +        "[00:23.09]能够拥抱的就别拉扯\n" +        "[00:27.22]时间着急的 冲刷着\n" +        "[00:31.65]剩下了什么\n" +        "[00:35.18]原谅走过的那些曲折\n" +        "[00:39.14]原来留下的都是真的\n" +        "[00:43.22]纵然似梦啊 半醒着\n" +        "[00:47.35]笑着哭着都快活\n" +        "[00:51.69]谁让\n" +        "[00:54.73]时间是让人猝不及防的东西\n" +        "[00:58.95]晴时有风阴有时雨\n" +        "[01:02.95]争不过朝夕 又念着往昔\n" +        "[01:06.93]偷走了青丝却留住一个你\n" +        "[01:11.00]岁月是一场有去无回的旅行\n" +        "[01:15.01]好的坏的都是风景\n" +        "[01:18.98]别怪我贪心 只是不愿醒\n" +        "[01:22.98]因为你只为你愿和我一起\n" +        "[01:27.00]看云淡风轻\n" +        "[01:31.14]\n" +        "[01:42.91]时间是让人猝不及防的东西\n" +        "[01:46.92]晴时有风阴有时雨\n" +        "[01:50.91]争不过朝夕 又念着往昔\n" +        "[01:54.92]偷走了青丝却留住一个你\n" +        "[01:58.89]岁月是一场有去无回的旅行\n" +        "[02:02.88]好的坏的都是风景\n" +        "[02:06.96]别怪我贪心 只是不愿醒\n" +        "[02:10.86]因为你只为你愿和我一起\n" +        "[02:16.32]看云淡风轻\n" +        "[02:20.07]"};console.log(data.music);const temp = {};const LRC = data.music;const matchLrc = LRC.split(/\n/);const reg = /\[(\d{2}):(\d{2})\.(\d{2})](.*)/;for (let i = 0; i < matchLrc.length; i += 1) {   const item = matchLrc[i];   // exec 没有匹配返回 null   const res = reg.exec(item);   if (! reg) continue;   const [_, m, s, ms, text] = res;   // 将他们转成秒 毫秒也可以做秒的四舍五入操作   // const key = (m * 60) + Math.round(s);   // - 0 05 - 0 = 5   // console.log((m * 60) + ((s + '.' + ms) - 0));   const key = (m * 60) + (s - 0);   temp[key] = text;}let html = '';for (let time in temp) {   html += `<p time=${time}>${temp[time]}</p>`}const lrcContent = document.querySelector('.lrc-content');lrcContent.innerHTML = html;const musicBtn = document.getElementById('musicBtn');let index = -1;musicBtn.ontimeupdate = e => {   // 获取秒数 与 dom 元素对应   // console.log(e.target.currentTime, 'time');   const key = Math.floor(e.target.currentTime);   if (! temp[key]) return;   const p = lrcContent.querySelector(`p[time='${key}']`);   // 此时的 p top值，大于 content，用 p - content 的 top 值，即为需要移动的距离   const far = p.offsetTop - lrcContent.offsetTop;   lrcContent.style.transform = `translate(-50%, -${far}px)`;   p.classList.add('active');   if (index > -1 && index !== key) lrcContent.querySelector(`p[time='${index}']`).classList.remove('active');   index = key;}</script><pre><code class="javascript">data.music = &#39;歌词&#39;; // 歌词在 log 自行复制const temp = {};const LRC = data.music;const matchLrc = LRC.split(/\n/);const reg = /\[(\d{2}):(\d{2})\.(\d{2})](.*)/;for (let i = 0; i &lt; matchLrc.length; i += 1) {   const item = matchLrc[i];   // exec 没有匹配返回 null   const res = reg.exec(item);   if (! reg) continue;   const [_, m, s, ms, text] = res;   // 将他们转成秒 毫秒也可以做秒的四舍五入操作   // const key = (m * 60) + Math.round(s);   // - 0 05 - 0 = 5   // console.log((m * 60) + ((s + &#39;.&#39; + ms) - 0));   const key = (m * 60) + (s - 0);   temp[key] = text;}let html = &#39;&#39;;for (let time in temp) {   html += `&lt;p time=${time}&gt;${temp[time]}&lt;/p&gt;`}const lrcContent = document.querySelector(&#39;.lrc-content&#39;);lrcContent.innerHTML = html;const musicBtn = document.getElementById(&#39;musicBtn&#39;);let index = -1;musicBtn.ontimeupdate = e =&gt; {   // 获取秒数 与 dom 元素对应   // console.log(e.target.currentTime, &#39;time&#39;);   const key = Math.floor(e.target.currentTime);   if (! temp[key]) return;   const p = lrcContent.querySelector(`p[time=&#39;${key}&#39;]`);   // 此时的 p top值，大于 content，用 p - content 的 top 值，即为需要移动的距离   const far = p.offsetTop - lrcContent.offsetTop;   lrcContent.style.transform = `translate(-50%, -${far}px)`;   p.classList.add(&#39;active&#39;);   if (index &gt; -1 &amp;&amp; index !== key) lrcContent.querySelector(`p[time=&#39;${index}&#39;]`).classList.remove(&#39;active&#39;);   index = key;}</code></pre>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>demo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css 底部菜单栏动画</title>
    <link href="/2019/07/01/css-tab/"/>
    <url>/2019/07/01/css-tab/</url>
    
    <content type="html"><![CDATA[<p>从中间展开 after 需要<br>设置 position:absolute；left：0；right：0；bottom：0；margin：auto</p><iframe width="100%" height="500" src="//jsfiddle.net/142536yu/fq3pgnx0/embedded/js,html,css,result/dark/" allowfullscreen="allowfullscreen" allowpaymentrequest frameborder="0"></iframe>]]></content>
    
    
    <categories>
      
      <category>cssTricks</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css 背景渐变 实现优惠券</title>
    <link href="/2019/07/01/coucpons-bg/"/>
    <url>/2019/07/01/coucpons-bg/</url>
    
    <content type="html"><![CDATA[<h5 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h5><h6 id="线性渐变-径向渐变"><a href="#线性渐变-径向渐变" class="headerlink" title="线性渐变 径向渐变"></a>线性渐变 径向渐变</h6><ol><li>使用径向渐变实现缺口效果</li></ol><iframe width="100%" height="300" src="//jsfiddle.net/142536yu/5qpf47en/4/embedded/js,html,css,result/dark/" allowfullscreen="allowfullscreen" allowpaymentrequest frameborder="0"></iframe>]]></content>
    
    
    <categories>
      
      <category>cssTricks</category>
      
    </categories>
    
    
    <tags>
      
      <tag>background</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac + docker 容器搭建本地 gitlab ci runner + ssh | ftp 自动部署</title>
    <link href="/2019/07/01/gitlab-ci/"/>
    <url>/2019/07/01/gitlab-ci/</url>
    
    <content type="html"><![CDATA[<h4 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h4><blockquote><p><a href="https://www.docker.com/products/docker-toolbox" target="_blank" rel="noopener">https://www.docker.com/products/docker-toolbox</a></p></blockquote><h4 id="加速器"><a href="#加速器" class="headerlink" title="加速器"></a>加速器</h4><blockquote><p><a href="https://dashboard.daocloud.io/mirror" target="_blank" rel="noopener">https://dashboard.daocloud.io/mirror</a></p></blockquote><ol><li>点击立即开始－接入自有主机－我已有一台主机－选择MAC－直接点击</li><li>根据步骤 直至控制台显示有你的主机</li><li>去镜像仓库搜索 <code>gitlab-ce</code></li></ol><pre><code>部署镜像可在命令行部署，或者刚刚下载的 Gui 工具内</code></pre><ol start="4"><li>部署好镜像，打开映射的主机端口，会显示重置密码(密码应为 八位+英文字符限制)默认用户名 <code>root</code></li><li>安装 runner 镜像，可在 <a href="https://dashboard.daocloud.io/" target="_blank" rel="noopener">Daocloud</a> 中部署到主机</li><li>注册runner</li></ol><pre><code class="yml">在刚刚安装的 gitlab 中创建项目，在项目内的setting选项选中 Ci/CD在 Runners 选项中会看到对应的 链接 和 token</code></pre><p><img src="https://i.loli.net/2019/07/01/5d197ecc3e59810455.png" alt="image"></p><ol start="7"><li>注册 runner</li></ol><pre><code class="yml">启动 runner 容器，并进入容器docker exec -it runner bash退出命令 exit进入容器输入gitlab-runner register -n \   --url http://172.17.0.3/ \   --registration-token PCfVAC_B_zJWDzz_xxkt \   --executor docker \   --description &quot;runner1&quot; \   --docker-image &quot;node:latest&quot; \   --clone-url http://172.17.0.3/ url：gitlab 的域名，docker内为容器的 IPregistration-token： 刚刚复制的 tokenexecutor： 运行环境description：clone-url： 很重要，不添加可能会报错如下fatal: unable to access &#39;http://gitlab-ci-token:[MASKED]@f96d3c31771a默认注册输入 gitlab-runner register  是按流程来的有 tag标签按上面步骤需要在 setting/[CI/CD]/runners 设置 tag</code></pre><h6 id="设置完成，可在-setting-CI-CD-runners-看到-runner"><a href="#设置完成，可在-setting-CI-CD-runners-看到-runner" class="headerlink" title="设置完成，可在  setting/[CI/CD]/runners 看到 runner"></a>设置完成，可在  setting/[CI/CD]/runners 看到 runner</h6><p><img src="https://img-blog.csdn.net/20170515161632358?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWl4aWFveWFuZzE2OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"></p><ol start="8"><li>配置 ssh mac/Linux 环境</li></ol><pre><code class="Python"># 不建议使用 root 账户创建，可能会有各种问题# 创建账户 kshao1useradd kshao1# 修改密码passwd kshao1# 直接生成 公私钥 全程回车 免密登陆ssh-keygen -t rsa || ssh-keygen# 一般用户会在 home/用户名/.ssh 看到文件密钥文件# 如果没有以下文件则生成touch authorized_keys# 该文件权限必须是 600 路径随意chmod 600 /root/.ssh/authorized_keys# 是&gt;&gt;而不是&gt;，双尖括号&gt;&gt;表示像向文件中追加：cat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys</code></pre><blockquote><p>细节 <a href="https://blog.csdn.net/nahancy/article/details/79059135" target="_blank" rel="noopener">https://blog.csdn.net/nahancy/article/details/79059135</a></p></blockquote><h6 id="使用-shell-ssh-密码链接"><a href="#使用-shell-ssh-密码链接" class="headerlink" title="使用 shell ssh 密码链接"></a>使用 shell ssh 密码链接</h6><pre><code>#!/usr/bin/expect -fset TARGET 119.3.79.171set USER xxxset PASSWD xxxset PORT xxxset timeout 10spawn ssh $USER@$TARGET -p $PORTexpect {    &quot;*yes/no&quot; {send &quot;yes\r&quot;; exp_continue}    &quot;*password:&quot; {send &quot;$PASSWD\r&quot;}}interact</code></pre><ol start="9"><li>配值 .gitlab-ci.yml 文件<h6 id="Lftp-连接虚拟主机"><a href="#Lftp-连接虚拟主机" class="headerlink" title="Lftp 连接虚拟主机"></a>Lftp 连接虚拟主机</h6><pre><code class="yml">image: mwienk/docker-lftp:latest</code></pre></li></ol><p>stages:</p><ul><li>deploy</li></ul><p>deploy:<br>  stage: deploy</p><p>  script:</p><pre><code># 指定目录覆盖上传 (强制更新)  - ls -la  - lftp -c &quot;set ftp:ssl-allow no; open -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST -p $port;mirror -RLv ./public /gmlh97ux/wwwroot --ignore-time --transfer-all --parallel=50 --exclude-glob .git* --exclude .git/&quot;</code></pre><p>  tags:</p><pre><code># runner 容器标签- docker</code></pre><p>  only:</p><pre><code># 仅 master 分支- master</code></pre><pre><code>###### ssh 连接服务器 需要准备好 密钥文件 scp 同理###### shell文件 可在 yml 中打开 script ./xxx```bash#!/bin/sh# -tt 取消提示# ./id_rsa1 文件地址  ssh -tt -i ./id_rsa1 kshao1@119.3.79.170 -p 22  &lt;&lt; remotessh  echo down  cd /home/kshao1/.ssh  ls  exitremotessh</code></pre>]]></content>
    
    
    <categories>
      
      <category>其他教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gitlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Hexo + Next + Algolia 搜索 搭建博客</title>
    <link href="/2019/07/01/blog/"/>
    <url>/2019/07/01/blog/</url>
    
    <content type="html"><![CDATA[<h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><h5 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h5><pre><code>$ npm install hexo-cli -g #282a2e</code></pre><h5 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h5><pre><code class="Python">$ hexo init [folder]# folder  项目名称</code></pre><h5 id="启动预览"><a href="#启动预览" class="headerlink" title="启动预览"></a>启动预览</h5><pre><code class="Python">$ hexo server 预览# 如你是 webstrom 可在 package 内的 scripts 中添加&quot;start&quot;: &quot;hexo server&quot;# 方便以后启动预览</code></pre><h5 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h5><pre><code class="Python">$ hexo new [layout] &lt;title&gt;</code></pre><h4 id="安装-Next-主题"><a href="#安装-Next-主题" class="headerlink" title="安装 Next 主题"></a>安装 Next 主题</h4><blockquote><p>官网 <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a></p></blockquote><pre><code class="Python"># 官网提供的是 旧版 链接，注意本文的发布日期再去官网对照$ cd hexo$ git clone https://github.com/theme-next/hexo-theme-next themes/next</code></pre><h6 id="安装完成之后去站点配置文件，根目录-config-选用-Next"><a href="#安装完成之后去站点配置文件，根目录-config-选用-Next" class="headerlink" title="安装完成之后去站点配置文件，根目录/_config 选用 Next"></a>安装完成之后去站点配置文件，根目录/_config 选用 Next</h6><pre><code>theme: next</code></pre><h5 id="配置菜单的-分类、标签"><a href="#配置菜单的-分类、标签" class="headerlink" title="配置菜单的 分类、标签"></a>配置菜单的 分类、标签</h5><pre><code class="Python">$ cd your-hexo-site$ hexo new page tags</code></pre><h6 id="修改菜单-Next-主题配置文件"><a href="#修改菜单-Next-主题配置文件" class="headerlink" title="修改菜单(Next 主题配置文件)"></a>修改菜单(Next 主题配置文件)</h6><pre><code>menu:  home: /  archives: /archives  tags: /tags</code></pre><h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><pre><code># ---# 分类categories:  - 其他教程# 标签tags:  - blog# ---</code></pre><h4 id="安装-Algolia-搜索"><a href="#安装-Algolia-搜索" class="headerlink" title="安装 Algolia 搜索"></a>安装 Algolia 搜索</h4><h6 id="此操作流程只在-Next-主题下测试"><a href="#此操作流程只在-Next-主题下测试" class="headerlink" title="此操作流程只在 Next 主题下测试"></a>此操作流程只在 Next 主题下测试</h6><h1 align="center">Algolia 搜索</h1><p>NexT 内部提供 Algolia 的搜索功能，要使用此功能请确保所使用的 NexT 版本在 <code>v5.1.0</code> 之后。需要注意的是，仅仅将 <code>next/_config.yml</code> 中 <code>algolia_search</code> 的 <code>enable</code> 打开<strong>并不能让你使用 Algolia 搜索</strong>，你还需要<strong>使用对应的 Hexo-Algolia 插件</strong> 才能真正在博客页面中使用 Algolia 搜索。按照下面介绍的步骤操作即可完成 Algolia 搜索的安装。</p><ol><li><p>前往 <a href="https://www.algolia.com/" target="_blank" rel="noopener">Algolia 注册页面</a>，注册一个新账户。 可以使用 GitHub 或者 Google 账户直接登录，注册后的 14 天内拥有所有功能（包括收费类别的）。之后若未续费会自动降级为免费账户，免费账户 总共有 10,000 条记录，每月有 100,000 的可以操作数。注册完成后，创建一个新的 Index，这个 Index 将在后面使用。</p><p> <img src="http://theme-next.iissnan.com/uploads/algolia/algolia-step-2.png" alt=""></p></li><li><p>Index 创建完成后，此时这个 Index 里未包含任何数据。接下来需要安装 <a href="https://github.com/oncletom/hexo-algolia" target="_blank" rel="noopener">Hexo Algolia</a> 扩展，这个扩展的功能是搜集站点的内容并通过 API 发送给 Algolia。前往站点根目录，执行命令安装：</p><pre><code> $ cd hexo $ npm install --save hexo-algolia</code></pre></li><li><p>在 <code>API Keys</code> 页面找到需要使用的一些配置的值，包括 <code>ApplicationID</code> 和 <code>Search-Only API Key</code>。注意，<code>Admin API Key</code> 需要保密保存，不要外泄。</p><p> <img src="https://user-images.githubusercontent.com/8521181/35479066-64e35aec-0428-11e8-91f9-1ec3afa45c5c.png" alt=""></p></li><li><p>在 <code>API Keys</code> 页面，点击 <code>ALL API KEYS</code> 找到新建 INDEX 对应的 key，<strong>编辑权限</strong>，在弹出框中找到 ACL ，<strong>勾选 Add records、 Delete records、List indices、Delete index 权限</strong>，点击 <code>update</code> 更新。</p><p> <img src="https://user-images.githubusercontent.com/8521181/35479064-611aa0b4-0428-11e8-85a1-cfb449b486ec.png" alt=""><br> <img src="https://user-images.githubusercontent.com/8521181/35479084-d4f7ac02-0428-11e8-95a6-c4e3b1bef47b.png" alt=""></p></li><li><p>编辑 <code>站点配置文件</code>，新增以下配置，除了 <code>chunkSize</code> 字段，替换成在 Algolia 获取到的值：</p><pre><code class="yml"> algolia:   applicationID: &#39;applicationID&#39;   apiKey: &#39;apiKey&#39;   indexName: &#39;indexName&#39;   chunkSize: 5000</code></pre></li><li><p>当配置完成，在站点根目录下执行一下命令来更新上传 Index。请注意观察命令的输出。</p><pre><code> $ export HEXO_ALGOLIA_INDEXING_KEY=Search-Only API key # 使用 Git Bash # set HEXO_ALGOLIA_INDEXING_KEY=Search-Only API key # 使用 Windows CMD 命令行 $ hexo clean $ hexo algolia</code></pre><p> <img src="http://theme-next.iissnan.com/uploads/algolia/algolia-step-4.png" alt=""></p></li><li><p>切换到 NexT 目录，并安装 algolia-instant-search 到 <code>source/lib</code> 目录。</p><pre><code> $ cd themes/next $ git clone https://github.com/theme-next/theme-next-algolia-instant-search source/lib/algolia-instant-search</code></pre><p> 如果你想直接使用 CDN 设置 Algolia Search，则需要在<code>主题配置文件</code>中添加 vendors 字段：</p><pre><code class="yml"> vendors:   ...   # Internal version: 1   # https://www.algolia.com   algolia_instant_js: https://cdn.jsdelivr.net/npm/instantsearch.js@2.4.1/dist/instantsearch.js   algolia_instant_css: https://cdn.jsdelivr.net/npm/instantsearch.js@2.4.1/dist/instantsearch.min.css   ...</code></pre></li><li><p>更改<code>主题配置文件</code>，找到 Algolia Search 配置部分，将 <code>enable</code> 改为 <code>true</code>。同时你需要<strong>关闭</strong>其他搜索插件，如 Local Search 等。你也可以根据需要调整 <code>labels</code> 中的文本：</p><pre><code class="yml"> # Algolia Search algolia_search:   enable: true   hits:     per_page: 10   labels:     input_placeholder: Search for Posts     hits_empty: &quot;We didn&#39;t find any results for the search: ${query}&quot;     hits_stats: &quot;${hits} results found in ${time} ms&quot;</code></pre></li></ol><h2 align="center">已知的问题</h2><ol><li>考虑到 Algolia 免费账户的限制，目前 <a href="https://github.com/oncletom/hexo-algolia" target="_blank" rel="noopener">Hexo-Algolia</a> 插件最新版本去掉了正文索引功能。</li><li><a href="https://github.com/LouisBarranqueiro/hexo-algoliasearch" target="_blank" rel="noopener">Hexo-Algoliasearch</a> 插件提供了正文索引功能，不过需要替换 NEXT 主题中的关键字。对于免费账户，<code>Record Too Big</code> 的问题同样存在。<ul><li>替换 <code>source/js/algolia-search.js</code> 中所有的 <code>applicationID</code> 为 <code>appId</code></li><li>替换 <code>layout/_partials/head/head.swig</code> 中所有的 <code>applicationID</code> 为 <code>appId</code></li></ul></li></ol><blockquote><p>此文档在 /themes/nest/docs/ALGOLIA-SEARCH</p></blockquote><h4 id="看完以上文档，默认你以安装完-Algolia，接下来使用-Hexo-Algoliasearch"><a href="#看完以上文档，默认你以安装完-Algolia，接下来使用-Hexo-Algoliasearch" class="headerlink" title="看完以上文档，默认你以安装完 Algolia，接下来使用 Hexo-Algoliasearch"></a>看完以上文档，默认你以安装完 Algolia，接下来使用 Hexo-Algoliasearch</h4><ul><li>首先安装 <a href="https://github.com/LouisBarranqueiro/hexo-algoliasearch" target="_blank" rel="noopener">Hexo-Algoliasearch</a></li></ul><h5 id="在站点配置文件"><a href="#在站点配置文件" class="headerlink" title="在站点配置文件"></a>在站点配置文件</h5><pre><code class="yml">algolia:  # appid 为 applicationID 如未替换需替换  appId: &quot;Z7A3XW4R2I&quot;  # search only key  apiKey: &quot;12db1ad54372045549ef465881c17e743&quot;  adminApiKey: &quot;40321c7c207e7f73b63a19aa24c4761b&quot;  chunkSize: 5000  indexName: &quot;my-hexo-blog&quot;  fields:    - content:strip:truncate,0,500    - excerpt:strip    - gallery    - permalink    - photos    - slug    - tags    - title</code></pre><p>配置完成后运行</p><pre><code class="yml">$ hexo clean$ hexo algolia</code></pre><hr><p>配置好以上，Next的<code>algolia</code>搜索是没有内容搜索的，所以配置了上面的插件。<br>默认 <code>algolia</code> 搜索显示只有标题，关键词未高亮，所以开始了老本行工作。</p><ol><li>打开配置文件 <code>/themes/next/source/js</code> 替换以下内容</li></ol><pre><code class="javaScript">instantsearch.widgets.hits({      container  : &#39;#algolia-hits&#39;,      hitsPerPage: algoliaSettings.hits.per_page || 10,      templates  : {        item: function(data) {          var link = data.permalink ? data.permalink : CONFIG.root + data.path;          return (            `              &lt;ul&gt;                &lt;li&gt;                  &lt;a href=${link} class=&quot;algolia-hit-item-link&quot;&gt;${data._highlightResult.title.value}&lt;/a&gt;                  &lt;a href=${link} class=&quot;algolia-hit-item-match&quot;&gt;                    &lt;p&gt;${data._highlightResult.contentStripTruncate.value}&lt;/p&gt;                  &lt;/a&gt;                &lt;/li&gt;              &lt;/ul&gt;            `          );        },        empty: function(data) {          return (            &#39;&lt;div id=&quot;algolia-hits-empty&quot;&gt;&#39;          + algoliaSettings.labels.hits_empty.replace(/\$\{query}/, data.query)          + &#39;&lt;/div&gt;&#39;          );        }      },      cssClasses: {        item: &#39;algolia-hit-item&#39;      }    })</code></pre><ol start="2"><li>修改 css <code>/themes/next/source/css/main.styl</code></li></ol><pre><code class="styl">.algolia-hit-item-match  text-decoration none  border none  color rgba(31, 31, 31, 0.37)  &amp;:hover    color rgba(34, 34, 34, 0.53)  em    padding 3px    border-bottom: 1px dashed #f00;    font-weight: bold;    color: #f00;</code></pre>]]></content>
    
    
    <categories>
      
      <category>其他教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片懒加载的两种方法-节流 IntersectionObserver</title>
    <link href="/2019/03/17/e5-9b-be-e7-89-87-e6-87-92-e5-8a-a0-e8-bd-bd-e7-9a-84-e4-b8-a4-e7-a7-8d-e6-96-b9-e6-b3-95-e8-8a-82-e6-b5-81-intersectionobserver/"/>
    <url>/2019/03/17/e5-9b-be-e7-89-87-e6-87-92-e5-8a-a0-e8-bd-bd-e7-9a-84-e4-b8-a4-e7-a7-8d-e6-96-b9-e6-b3-95-e8-8a-82-e6-b5-81-intersectionobserver/</url>
    
    <content type="html"><![CDATA[<p><strong>第一种：</strong></p><blockquote><p>以下代码皆在 React 中测试使用</p></blockquote><p>使用 <strong><em>window</em></strong> 上的 <strong><em>onscroll</em></strong> 事件，配合封装好的 throttle 节流函数实现图片的懒加载。</p><p>render 函数内：</p><pre><code>render() {    const data = [      {        url: &#39;https://dwz.cn/Jwg1UQEj&#39;,        text: &#39;图片1-1&#39;,      },      {        url: &#39;https://dwz.cn/w8t4A0WD&#39;,        text: &#39;图片1-2&#39;,      },      {        url: &#39;https://dwz.cn/l1nYpL4U&#39;,        text: &#39;图片1-3&#39;,      },      {        url: &#39;https://dwz.cn/2XrYhRBX&#39;,        text: &#39;图片1-4&#39;,      },      {        url: &#39;https://dwz.cn/00pSTOtm&#39;,        text: &#39;图片1-5&#39;,      },      {        url: &#39;https://dwz.cn/Hg1aIh3e&#39;,        text: &#39;图片1-6&#39;,      },    ];    return(      &lt;ul className={styles.list}&gt;        {Object.keys(data).length ? data.map(item =&gt; {          return (            &lt;li key={item.url} &gt;              &lt;h2&gt;{item.text}&lt;/h2&gt;              &lt;img className={styles.lazyImg} src=&#39;https://dwz.cn/qLQmSywT&#39; _src={item.url} alt={item.text}/&gt;            &lt;/li&gt;          )        }) : &#39;loading&#39;}      &lt;/ul&gt;    )  }</code></pre><p>componentDidmount 函数内</p><pre><code>// 获取所有的需要懒加载的图片元素const imgs = document.querySelectorAll(&#39;.&#39;+styles.lazyImg);// 首次执行 手动触发滚动事件this.lazyLoad(imgs);// 节流函数const lazyLoad = this.throttle(e =&gt; this.lazyLoad(imgs), 400, true);window.onscroll - lazyLoad</code></pre><p>lazyLoad 方法</p><pre><code>lazyLoad = (imgs) =&gt; {    imgs.forEach(item =&gt; {      console.log(&#39;lazyLoad&#39;);      const top = item.getBoundingClientRect().top;      if (top &lt; window.innerHeight &amp;&amp; item.src !== item.getAttribute(&#39;_src&#39;)) {        item.src = item.getAttribute(&#39;_src&#39;);      }    })  };</code></pre><p>// 节流函数的封装<br>throttle = (fn, wait, immediate) =&gt; {<br>  let timer = null;<br>  let callNow = immediate;<br>  return function() {<br>    const args = arguments,<br>          that = this;<br>    if (callNow) {<br>      fn.apply(that, args);<br>      callNow = false<br>  }<br>    if (!timer) {<br>      setTimeout(() =&gt; {<br>        fn.apply(that, args);<br>        timer = null;<br>      }, wait)<br>    }<br>  }<br>};</p><p><strong>第二种</strong></p><p>使用 IntersectionObserver 接口，具体使用方法请去 MDN 查看</p><pre><code>const io = new IntersectionObserver(callback); // 获取所有的需要懒加载的图片元素const imgs = document.querySelectorAll(&#39;.&#39;+styles.lazyImg);function callback(entries) {      entries.forEach((item) =&gt; {        if(item.isIntersecting){          item.target.src = item.target.getAttribute(&#39;_src&#39;);          io.unobserve(item.target)        }      })}imgs.forEach((item)=&gt;{   io.observe(item)})</code></pre><p>componentDidmount 函数内</p><blockquote><p>本文引荐 <a href="https://www.jianshu.com/p/84a86e41eb2b" target="_blank" rel="noopener">https://www.jianshu.com/p/84a86e41eb2b</a></p><p>IntersectionObserver 亦可以实现 导航栏吸顶效果</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>算法面试题-查找指定的字符串</title>
    <link href="/2019/03/09/e7-ae-97-e6-b3-95-e9-9d-a2-e8-af-95-e9-a2-98-e6-9f-a5-e6-89-be-e6-8c-87-e5-ae-9a-e7-9a-84-e5-ad-97-e7-ac-a6-e4-b8-b2/"/>
    <url>/2019/03/09/e7-ae-97-e6-b3-95-e9-9d-a2-e8-af-95-e9-a2-98-e6-9f-a5-e6-89-be-e6-8c-87-e5-ae-9a-e7-9a-84-e5-ad-97-e7-ac-a6-e4-b8-b2/</url>
    
    <content type="html"><![CDATA[<p>实现一个算法，寻找字符串中出现次数最少的、并且首次出现位置最前的字符如<br>“<em>cbaacfdeaebb</em>“，符合要求的是”f”，因为他只出现了一次（次数最少）。<br>并且比其他只出现一次的字符（如”d”）首次出现的位置最靠前。</p><pre><code>const findMinStr = (str) =&gt; {    const hash = {};    for (let i = 0; i &lt; str.length; i += 1) {      hash[str[i]] = hash[str[i]] || { index: i, count: 0 };      hash[str[i]].count += 1;    }    return Object.keys(hash).map(item =&gt; {      return Object.assign({ char: item }, hash[item]);    })      .sort((a, b) =&gt; a.count - b.count)      .filter((item, index, arr) =&gt; item.count === arr[0].count)      .sort((a, b) =&gt; a.index - b.index)[0].char};const str = &#39;cbaacfdeaebb&#39;;findMinStr (str)  // &#39;f&#39;</code></pre>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>在react中使用antd+less+css modules</title>
    <link href="/2019/03/09/e5-9c-a8react-e4-b8-ad-e4-bd-bf-e7-94-a8antdlesscss-modules/"/>
    <url>/2019/03/09/e5-9c-a8react-e4-b8-ad-e4-bd-bf-e7-94-a8antdlesscss-modules/</url>
    
    <content type="html"><![CDATA[<h4 id="配置less"><a href="#配置less" class="headerlink" title="配置less"></a>配置less</h4><p>首先安装less和less-loader</p><pre><code>cnpm i --save-dev less less-loader</code></pre><p>然后在webpack.config中配置</p><pre><code>{  test: /\.less$/,  use: [      require.resolve(&#39;style-loader&#39;),      {          loader: require.resolve(&#39;css-loader&#39;)      },      {          loader: require.resolve(&#39;less-loader&#39;), // compiles Less to CSS      },  ],},</code></pre><h4 id="开启css-modules功能"><a href="#开启css-modules功能" class="headerlink" title="开启css modules功能"></a>开启css modules功能</h4><p>但是如果我想开启css modules功能，使less和css可以模块化，就需要再配置，但是不能全局配置，这样的话会导致antd没有使用css modules模块的框架的样式无法作用。</p><h6 id="开启less的css-modules功能"><a href="#开启less的css-modules功能" class="headerlink" title="开启less的css modules功能"></a>开启less的css modules功能</h6><pre><code> 这里我开启自己编写的less文件的css modules功能 除了node_modules库中的less，//也就是可以过滤掉antd库中的样式{  test: /\.less$/,  exclude: [/node_modules/],  use: [      require.resolve(&#39;style-loader&#39;),      {          loader: require.resolve(&#39;css-loader&#39;),          options: {              modules: true,              localIdentName:&quot;[name]__[local]___[hash:base64:5]&quot;          },      },      {          loader: require.resolve(&#39;less-loader&#39;), // compiles Less to CSS      },  ],},</code></pre><h6 id="开启css的css-modules功能"><a href="#开启css的css-modules功能" class="headerlink" title="开启css的css modules功能"></a>开启css的css modules功能</h6><p>如果想开启css的css modules功能，就比较麻烦点，除了针对css开启css modules，还需要需要针对antd的css 单独写一条loader的规则,不开启 css modules。</p><pre><code> 这里设置css开启modules支持,node_modules和antd里面的css不开启{  test: /\.css$/,  exclude: /node_modules|antd\.css/,  use: [      require.resolve(&#39;style-loader&#39;),      {          loader: require.resolve(&#39;css-loader&#39;),          options: {              importLoaders: 1,              // 改动              modules: true,   // 新增对css modules的支持              localIndetName: &#39;[name]__[local]__[hash:base64:5]&#39;, //          },      },      {          loader: require.resolve(&#39;postcss-loader&#39;),          options: {              ident: &#39;postcss&#39;,              plugins: () =&gt; [                  require(&#39;postcss-flexbugs-fixes&#39;),                  autoprefixer({                      browsers: [                          &#39;&gt;1%&#39;,                          &#39;last 4 versions&#39;,                          &#39;Firefox ESR&#39;,                          &#39;not ie &lt; 9&#39;, // React doesn&#39;t support IE8 anyway                      ],                      flexbox: &#39;no-2009&#39;,                  }),              ],          },      },  ],}然后针对node_modules和antd里面的css写编译配置{  test: /\.css$/,  include: /node_modules|antd\.css/,  use: [      require.resolve(&#39;style-loader&#39;),      {          loader: require.resolve(&#39;css-loader&#39;),          options: {              importLoaders: 1,              // 改动              // modules: true,   // 新增对css modules的支持              // localIndetName: &#39;[name]__[local]__[hash:base64:5]&#39;, //          },      },      {          loader: require.resolve(&#39;postcss-loader&#39;),          options: {              ident: &#39;postcss&#39;,              plugins: () =&gt; [                  require(&#39;postcss-flexbugs-fixes&#39;),                  autoprefixer({                      browsers: [                          &#39;&gt;1%&#39;,                          &#39;last 4 versions&#39;,                          &#39;Firefox ESR&#39;,                          &#39;not ie &lt; 9&#39;, // React doesn&#39;t support IE8 anyway                      ],                      flexbox: &#39;no-2009&#39;,                  }),              ],          },      },  ],},</code></pre><blockquote><p>至此就配置好了开发环境下的所有代码<br>同样的代码需要在webpack.config.prod，生产环境的webpack里面再配置一次，打包后的文件各种CSS和less文件才会生效。</p></blockquote><p><a href="https://www.jianshu.com/p/51ff1c8be301" target="_blank" rel="noopener">转自 追风的云月</a></p>]]></content>
    
    
    <categories>
      
      <category>webpack</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>编译修饰符 Bable配置</title>
    <link href="/2019/03/08/e7-bc-96-e8-af-91-e7-ae-ad-e5-a4-b4-e5-87-bd-e6-95-b0-bable-e9-85-8d-e7-bd-ae/"/>
    <url>/2019/03/08/e7-bc-96-e8-af-91-e7-ae-ad-e5-a4-b4-e5-87-bd-e6-95-b0-bable-e9-85-8d-e7-bd-ae/</url>
    
    <content type="html"><![CDATA[<p>xiu npm install –save-dev babel-plugin-transform-decorators-legacy</p><pre><code>在根目录.babelrc文件里&quot;plugins&quot;: [&quot;transform-decorators-legacy&quot;]如果没有babel.lrc文件请搜索对应框架的文件配置</code></pre>]]></content>
    
    
    <categories>
      
      <category>webpack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>babel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云 144 元 一年30Mb香港服务器 3.4~3.15</title>
    <link href="/2019/03/08/e9-98-bf-e9-87-8c-e4-ba-91-144-e5-85-83-e4-b8-80-e5-b9-b430mb-e9-a6-99-e6-b8-af-e6-9c-8d-e5-8a-a1-e5-99-a8-3-43-15/"/>
    <url>/2019/03/08/e9-98-bf-e9-87-8c-e4-ba-91-144-e5-85-83-e4-b8-80-e5-b9-b430mb-e9-a6-99-e6-b8-af-e6-9c-8d-e5-8a-a1-e5-99-a8-3-43-15/</url>
    
    <content type="html"><![CDATA[<p>打开：<a href="http://t.cn/EIJKfAY" target="_blank" rel="noopener">http://t.cn/EIJKfAY</a> 点击立即报名</p><p>打开：<a href="http://t.cn/EIJ9KUH" target="_blank" rel="noopener">http://t.cn/EIJ9KUH</a> 按上图选择香港CentOs系统1年30Mb服务器只需144元</p><p>活动时间：2019.3.4~3.15</p><p><img src="http://blog.ksh7.com/wp-content/uploads/2019/03/rjIMsVh_jpg-1-1024x387.jpg" alt=""></p><p><img src="http://blog.ksh7.com/wp-content/uploads/2019/03/rjIMvXu_jpg-1-1024x680.jpg" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>福利活动</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>courseTable -- 可移动的React课程表组件</title>
    <link href="/2019/03/08/coursetable-e5-8f-af-e7-a7-bb-e5-8a-a8-e7-9a-84react-e8-af-be-e7-a8-8b-e8-a1-a8-e7-bb-84-e4-bb-b6/"/>
    <url>/2019/03/08/coursetable-e5-8f-af-e7-a7-bb-e5-8a-a8-e7-9a-84react-e8-af-be-e7-a8-8b-e8-a1-a8-e7-bb-84-e4-bb-b6/</url>
    
    <content type="html"><![CDATA[<h1 id="Course-Table"><a href="#Course-Table" class="headerlink" title="Course Table"></a>Course Table</h1><h2 id="✨-Features"><a href="#✨-Features" class="headerlink" title="✨ Features"></a>✨ Features</h2><ul><li>可移动的 课程表</li><li>代码简单，欢迎优化</li><li>预览链接 <a href="https://Kshao123.github.io" target="_blank" rel="noopener">https://Kshao123.github.io</a></li></ul><p><a href="http://godban.github.io/browsers-support-badges/" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/alrra/browser-logos/master/src/edge/edge_48x48.png" alt="IE / Edge"></a><br>IE / Edge</p><p><a href="http://godban.github.io/browsers-support-badges/" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png" alt="Firefox"></a><br>Firefox</p><p><a href="http://godban.github.io/browsers-support-badges/" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png" alt="Chrome"></a><br>Chrome</p><p><a href="http://godban.github.io/browsers-support-badges/" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/alrra/browser-logos/master/src/safari/safari_48x48.png" alt="Safari"></a><br>Safari</p><p><a href="http://godban.github.io/browsers-support-badges/" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/alrra/browser-logos/master/src/opera/opera_48x48.png" alt="Opera"></a><br>Opera</p><p><a href="http://godban.github.io/browsers-support-badges/" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/alrra/browser-logos/master/src/electron/electron_48x48.png" alt="Electron"></a><br>Electron</p><p>IE9, IE10, IE11, Edge</p><p>last 2 versions</p><p>last 2 versions</p><p>last 2 versions</p><p>last 2 versions</p><p>last 2 versions</p><h2 id="📦-Install"><a href="#📦-Install" class="headerlink" title="📦 Install"></a>📦 Install</h2><pre><code>npm i course-tablenpm i course-table -S</code></pre><h2 id="🔨-Usage"><a href="#🔨-Usage" class="headerlink" title="🔨 Usage"></a>🔨 Usage</h2><pre><code>import CourseTable from &#39;course-table&#39;;const courseTables = {      1: [        {          startTime:1551920827000,          endTime:1551924427000,          stuNameList: [&#39;123&#39;],          teaName: &#39;312&#39;        }      ]    };const handleConfirm = (data,handleOK) =&gt; {    handleOK()};ReactDOM.render(    &lt;CourseTable         courseTables={courseTables}        handleConfirm={handleConfirm}    /&gt;,     mountNode);</code></pre>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ReactComponent</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
